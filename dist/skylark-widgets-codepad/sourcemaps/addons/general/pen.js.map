{"version":3,"sources":["addons/general/pen.js"],"names":["define","langx","Addon","util","CodeGround","AddonPen","_init","super","p","$pane","$paneTitle","$paneElement","coder","this","panes","options","html","title","classChecker","css","js","console","$availablePanes","$container","classList","contains","push","querySelector","resizablePanes","let","i","length","type","j","indexOf","replace","container","expander","undefined","document","createElement","add","innerHTML","firstElementChild","insertBefore","firstChild","addEventListener","startExpand","bind","event","filter","pane","target","shift","$previousPane","$relativePixel","parseInt","window","getComputedStyle","parentNode","style","display","startX","clientX","startWidth","parseFloat","mousemove","doDrag","mouseup","stopDrag","previousPane","relativePixel","ppNewWidth","cpNewWidth","maxWidth","width","removeEventListener","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,OAAO,CACH,sBACA,cACA,aACA,iBACD,SAAUC,EAAMC,EAAMC,EAAKC,GAC1B,mBACMC,UAAkBH,EAGpBI,QACIC,MAAMD,MAAM,EAEZ,IAsBSE,EAiBDC,EAKAC,EAGAC,EA/CJC,EAAQC,KAAKD,MAGbE,GAFUD,KAAKE,QAEP,CACRC,KAAM,CACFC,MAAO,OACPC,aAAc,kBAClB,EACAC,IAAK,CACDF,MAAO,MACPC,aAAc,iBAClB,EACAE,GAAI,CACAH,MAAO,aACPC,aAAc,gBAClB,EACAG,QAAS,CACLJ,MAAO,UACPC,aAAc,wBAClB,CACJ,GACII,EAAkB,GACtB,IAASd,KAAKM,EACNF,EAAMW,WAAWC,UAAUC,SAASX,EAAMN,GAAGU,YAAY,GACzDI,EAAgBI,KAAKd,EAAMW,WAAWI,cAAc,iBAAkBnB,CAAI,CAAC,EAGnFK,KAAKe,eAAiB,GACtB,IAAKC,IAAIC,EAAI,EAAGA,EAAIR,EAAgBS,OAAQD,CAAC,GAAI,CAC7CD,IAAIG,EACJ,IAAKH,IAAII,EAAI,EAAGA,EAAIX,EAAgBQ,GAAGN,UAAUO,OAAQE,CAAC,GACtD,GAAiE,CAAC,IAA9DX,EAAgBQ,GAAGN,UAAUS,GAAGC,QAAQ,eAAe,EAAU,CACjEF,EAAOV,EAAgBQ,GAAGN,UAAUS,GAAGE,QAAQ,gBAAiB,EAAE,EAClE,KACJ,CAECH,IAGDvB,EAAQ,CACR2B,UAAWd,EAAgBQ,GAC3BO,SAAUC,KAAAA,CACd,EACAzB,KAAKe,eAAeF,KAAKjB,CAAK,GAC1BC,EAAa6B,SAASC,cAAc,KAAK,GAClChB,UAAUiB,IAAI,oBAAoB,EAC7C/B,EAAWgC,UAAY5B,EAAMkB,GAAMf,OAASe,GACxCrB,EAAeW,EAAgBQ,GAAGa,mBACzBC,aAAalC,EAAYC,EAAakC,UAAU,EACrD,EAAJf,KACArB,EAAM4B,SAAWE,SAASC,cAAc,KAAK,EAC7C/B,EAAM4B,SAASb,UAAUiB,IAAI,6BAA6B,EAC1DhC,EAAM4B,SAASS,iBAAiB,YAAajC,KAAKkC,YAAYC,KAAKnC,KAAMD,CAAK,CAAC,EAC/ED,EAAaiC,aAAanC,EAAM4B,SAAU3B,CAAU,EAE5D,CACJ,CACAqC,YAAYnC,EAAOqC,GACfpB,IAAIpB,EAAQI,KAAKe,eAAesB,OAAOC,GAC5BA,EAAKd,WAAaY,EAAMG,MAClC,EAAEC,MAAM,EACLC,EAAgBzC,KAAKe,eAAef,KAAKe,eAAeM,QAAQzB,CAAK,EAAI,GACzE8C,EAAiB,IAAMC,SAASC,OAAOC,iBAAiBjD,EAAM2B,UAAUuB,UAAU,EAAS,MAAG,EAAE,EACpGlD,EAAM2B,UAAUuB,WAAWC,MAAMC,QAAU,OAC3CpD,EAAMqD,OAASb,EAAMc,QACrBtD,EAAMuD,WAAaC,WAAWR,OAAOC,iBAAiBjD,EAAM2B,SAAS,EAAS,MAAG,EAAE,EACnFkB,EAAcU,WAAaC,WAAWR,OAAOC,iBAAiBJ,EAAclB,SAAS,EAAS,MAAG,EAAE,EACnG3B,EAAM2B,UAAUuB,WAAWC,MAAMC,QAAU,GAC3CpD,EAAMyD,UAAYrD,KAAKsD,OAAOnB,KAAKnC,KAAMJ,EAAO6C,EAAeC,CAAc,EAC7E9C,EAAM2D,QAAUvD,KAAKwD,SAASrB,KAAKnC,KAAMJ,CAAK,EAC9C8B,SAASO,iBAAiB,YAAarC,EAAMyD,UAAW,CAAA,CAAK,EAC7D3B,SAASO,iBAAiB,UAAWrC,EAAM2D,QAAS,CAAA,CAAK,CAC7D,CACAD,OAAOhB,EAAMmB,EAAcC,EAAetB,GACtCpB,IAAI2C,EAAaF,EAAaN,YAAcf,EAAMc,QAAUZ,EAAKW,QAAUS,EACvEE,EAAatB,EAAKa,YAAcf,EAAMc,QAAUZ,EAAKW,QAAUS,EAC7C,IAClBC,GADkB,IACaC,IAC/BtB,EAAKf,UAAUwB,MAAMc,SAAW,OAChCJ,EAAalC,UAAUwB,MAAMc,SAAW,OACxCJ,EAAalC,UAAUwB,MAAMe,MAAYH,EAAJ,IACrCrB,EAAKf,UAAUwB,MAAMe,MAAYF,EAAJ,IAErC,CACAJ,SAASlB,EAAMF,GACXV,SAASqC,oBAAoB,YAAazB,EAAKe,UAAW,CAAA,CAAK,EAC/D3B,SAASqC,oBAAoB,UAAWzB,EAAKiB,QAAS,CAAA,CAAK,CAC/D,CAEAS,0BACI,MAAO,SACX,CAEAC,uBACI,MAAO,KACX,CAEJ,CAIA,OAFAzE,EAAS0E,SAAS3E,CAAU,EAErBC,CACX,CAAC","file":"../../../addons/general/pen.js","sourcesContent":["define([\r\n    'skylark-langx/langx',\r\n    \"../../addon\",\r\n    '../../util',\r\n    \"../../codepad\"\r\n], function (langx,Addon,util,CodeGround) {\r\n    'use strict';\r\n    class AddonPen  extends Addon{\r\n        //constructor(coder, options) \r\n\r\n        _init() {\r\n            super._init();\r\n\r\n            var coder = this.coder,\r\n                options = this.options;\r\n\r\n            let panes = {\r\n                html: {\r\n                    title: 'HTML',\r\n                    classChecker: 'codepad-has-html'\r\n                },\r\n                css: {\r\n                    title: 'CSS',\r\n                    classChecker: 'codepad-has-css'\r\n                },\r\n                js: {\r\n                    title: 'JavaScript',\r\n                    classChecker: 'codepad-has-js'\r\n                },\r\n                console: {\r\n                    title: 'Console',\r\n                    classChecker: 'codepad-plugin-console'\r\n                }\r\n            };\r\n            let $availablePanes = [];\r\n            for (let p in panes) {\r\n                if (coder.$container.classList.contains(panes[p].classChecker)) {\r\n                    $availablePanes.push(coder.$container.querySelector(`.codepad-pane-${ p }`));\r\n                }\r\n            }\r\n            this.resizablePanes = [];\r\n            for (let i = 0; i < $availablePanes.length; i++) {\r\n                let type;\r\n                for (let j = 0; j < $availablePanes[i].classList.length; j++) {\r\n                    if ($availablePanes[i].classList[j].indexOf('codepad-pane-') !== -1) {\r\n                        type = $availablePanes[i].classList[j].replace('codepad-pane-', '');\r\n                        break;\r\n                    }\r\n                }\r\n                if (!type) {\r\n                    continue;\r\n                }\r\n                let $pane = {\r\n                    container: $availablePanes[i],\r\n                    expander: undefined\r\n                };\r\n                this.resizablePanes.push($pane);\r\n                let $paneTitle = document.createElement('div');\r\n                $paneTitle.classList.add('codepad-pane-title');\r\n                $paneTitle.innerHTML = panes[type].title || type;\r\n                let $paneElement = $availablePanes[i].firstElementChild;\r\n                $paneElement.insertBefore($paneTitle, $paneElement.firstChild);\r\n                if (i > 0) {\r\n                    $pane.expander = document.createElement('div');\r\n                    $pane.expander.classList.add('codepad-plugin-pen-expander');\r\n                    $pane.expander.addEventListener('mousedown', this.startExpand.bind(this, coder));\r\n                    $paneElement.insertBefore($pane.expander, $paneTitle);\r\n                }\r\n            }\r\n        }\r\n        startExpand(coder, event) {\r\n            let $pane = this.resizablePanes.filter(pane => {\r\n                return pane.expander === event.target;\r\n            }).shift();\r\n            let $previousPane = this.resizablePanes[this.resizablePanes.indexOf($pane) - 1];\r\n            let $relativePixel = 100 / parseInt(window.getComputedStyle($pane.container.parentNode)['width'], 10);\r\n            $pane.container.parentNode.style.display = 'none';\r\n            $pane.startX = event.clientX;\r\n            $pane.startWidth = parseFloat(window.getComputedStyle($pane.container)['width'], 10);\r\n            $previousPane.startWidth = parseFloat(window.getComputedStyle($previousPane.container)['width'], 10);\r\n            $pane.container.parentNode.style.display = '';\r\n            $pane.mousemove = this.doDrag.bind(this, $pane, $previousPane, $relativePixel);\r\n            $pane.mouseup = this.stopDrag.bind(this, $pane);\r\n            document.addEventListener('mousemove', $pane.mousemove, false);\r\n            document.addEventListener('mouseup', $pane.mouseup, false);\r\n        }\r\n        doDrag(pane, previousPane, relativePixel, event) {\r\n            let ppNewWidth = previousPane.startWidth + (event.clientX - pane.startX) * relativePixel;\r\n            let cpNewWidth = pane.startWidth - (event.clientX - pane.startX) * relativePixel;\r\n            const PANE_MIN_SIZE = 10;\r\n            if (ppNewWidth >= PANE_MIN_SIZE && cpNewWidth >= PANE_MIN_SIZE) {\r\n                pane.container.style.maxWidth = 'none';\r\n                previousPane.container.style.maxWidth = 'none';\r\n                previousPane.container.style.width = `${ ppNewWidth }%`;\r\n                pane.container.style.width = `${ cpNewWidth }%`;\r\n            }\r\n        }\r\n        stopDrag(pane, event) {\r\n            document.removeEventListener('mousemove', pane.mousemove, false);\r\n            document.removeEventListener('mouseup', pane.mouseup, false);\r\n        }\r\n\r\n        static get categoryName() {\r\n            return \"general\";\r\n        }\r\n\r\n        static get addonName(){\r\n            return \"pen\";\r\n        }\r\n\r\n    };\r\n\r\n    AddonPen.register(CodeGround);\r\n\r\n    return AddonPen;\r\n});"]}