{"version":3,"sources":["addons/general/console.js"],"names":["define","langx","styler","Addon","util","CodeGround","AddonConsole","options","autoClear","_init","super","coder","this","logCaptureSnippet","capture","toString","$nav","document","createElement","$pane","addClass","innerHTML","$container","_velm","append","find","querySelector","$output","$input","$inputForm","$clear","addEventListener","submit","bind","history","clear","on","priority","change","window","getMessage","$coderContainer","historyIndex","contentCache","html","css","js","getIframe","e","source","contentWindow","data","JSON","parse","err","type","log","message","params","callback","snippetlessContent","content","replace","forceRender","indexOf","console","oldConsoleLog","Function","prototype","call","slice","arguments","forEach","parent","postMessage","stringify","apply","$log","appendChild","inputValue","value","trim","preventDefault","push","length","scriptOutput","eval","scrollTop","scrollHeight","gotHistory","selectionStart","keyCode","categoryName","addonName","register"],"mappings":"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","file":"../../../addons/general/console.js","sourcesContent":["define([\r\n    'skylark-langx/langx',\r\n    \"skylark-domx-styler\",\r\n    \"../../addon\",\r\n    '../../util',\r\n    \"../../codepad\"\r\n], function (langx,styler,Addon,util,CodeGround) {\r\n    'use strict';\r\n    \r\n    class AddonConsole  extends Addon{\r\n        //constructor(coder, options) \r\n\r\n        get options() {\r\n            return {\r\n               autoClear: false \r\n            }\r\n        }\r\n\r\n        _init() {\r\n            super._init();\r\n            var coder = this.coder,\r\n                options = this.options;\r\n            \r\n            var priority = 30;\r\n            var history = [];\r\n            var historyIndex = 0;\r\n            var logCaptureSnippet = `(function ${ this.capture.toString() })();`;\r\n            var contentCache = {\r\n                html: '',\r\n                css: '',\r\n                js: ''\r\n            };\r\n            var $nav = document.createElement('li');\r\n            styler.addClass($nav, 'codepad-nav-item codepad-nav-item-console');\r\n            $nav.innerHTML = '<a href=\"#\" data-codepad-type=\"console\">JS Console</a>';\r\n            var $pane = document.createElement('div');\r\n            styler.addClass($pane, 'codepad-pane codepad-pane-console');\r\n            $pane.innerHTML = `\r\n              <div class=\"codepad-console-container\">\r\n                <ul class=\"codepad-console-output\"></ul>\r\n                <form class=\"codepad-console-input\">\r\n                  <input type=\"text\">\r\n                </form>\r\n              </div>\r\n              <button class=\"codepad-button codepad-console-clear\">Clear</button>\r\n            `;\r\n\r\n            coder._velm.append($pane);\r\n            coder._velm.find('.codepad-nav').append($nav);\r\n            var $container = coder.$container.querySelector('.codepad-console-container');\r\n            var $output = coder.$container.querySelector('.codepad-console-output');\r\n            var $input = coder.$container.querySelector('.codepad-console-input input');\r\n            var $inputForm = coder.$container.querySelector('.codepad-console-input');\r\n            var $clear = coder.$container.querySelector('.codepad-console-clear');\r\n            $inputForm.addEventListener('submit', this.submit.bind(this));\r\n            $input.addEventListener('keydown', this.history.bind(this));\r\n            $clear.addEventListener('click', this.clear.bind(this));\r\n            if (options.autoClear === true) {\r\n                coder.on('change', this.autoClear.bind(this), priority - 1);\r\n            }\r\n            coder.on('change', this.change.bind(this), priority);\r\n            window.addEventListener('message', this.getMessage.bind(this));\r\n            this.$coderContainer = coder.$container;\r\n            this.$container = $container;\r\n            this.$input = $input;\r\n            this.$output = $output;\r\n            this.history = history;\r\n            this.historyIndex = historyIndex;\r\n            this.logCaptureSnippet = logCaptureSnippet;\r\n            this.contentCache = contentCache;\r\n            this.getIframe = this.getIframe.bind(this);\r\n        }\r\n        getIframe() {\r\n            return this.$coderContainer.querySelector('.codepad-pane-result iframe');\r\n        }\r\n        getMessage(e) {\r\n            if (e.source !== this.getIframe().contentWindow) {\r\n                return;\r\n            }\r\n            var data = {};\r\n            try {\r\n                data = JSON.parse(e.data);\r\n            } catch (err) {\r\n            }\r\n            if (data.type === 'codepad-console-log') {\r\n                this.log(data.message);\r\n            }\r\n        }\r\n        autoClear(params, callback) {\r\n            var snippetlessContent = params.content;\r\n            if (params.type === 'js') {\r\n                snippetlessContent = snippetlessContent.replace(this.logCaptureSnippet, '');\r\n            }\r\n            if (params.forceRender === true || this.contentCache[params.type] !== snippetlessContent) {\r\n                this.clear();\r\n            }\r\n            this.contentCache[params.type] = snippetlessContent;\r\n            //callback(null, params);\r\n        }\r\n        change(e) {\r\n            var params = e.data;\r\n            if (params.type !== 'js') {\r\n                return //callback(null, params);\r\n            }\r\n            if (params.content.indexOf(this.logCaptureSnippet) === -1) {\r\n                params.content = `${ this.logCaptureSnippet }${ params.content }`;\r\n            }\r\n            //callback(null, params);\r\n        }\r\n        capture() {\r\n            if (typeof window.console === 'undefined' || typeof window.console.log === 'undefined') {\r\n                window.console = {\r\n                    log: function () {\r\n                    }\r\n                };\r\n            }\r\n            var oldConsoleLog = Function.prototype.bind.call(window.console.log, window.console);\r\n            window.console.log = function () {\r\n                [].slice.call(arguments).forEach(function (message) {\r\n                    window.parent.postMessage(JSON.stringify({\r\n                        type: 'codepad-console-log',\r\n                        message: message\r\n                    }), '*');\r\n                });\r\n                oldConsoleLog.apply(oldConsoleLog, arguments);\r\n            };\r\n        }\r\n        log(message = '', type) {\r\n            var $log = document.createElement('li');\r\n            styler.addClass($log, 'codepad-console-log');\r\n            if (typeof type !== 'undefined') {\r\n                styler.addClass($log, `codepad-console-log-${ type }`);\r\n            }\r\n            $log.innerHTML = message;\r\n            this.$output.appendChild($log);\r\n        }\r\n        submit(e) {\r\n            var inputValue = this.$input.value.trim();\r\n            if (inputValue === '') {\r\n                return e.preventDefault();\r\n            }\r\n            this.history.push(inputValue);\r\n            this.historyIndex = this.history.length;\r\n            this.log(inputValue, 'history');\r\n            if (inputValue.indexOf('return') !== 0) {\r\n                inputValue = 'return ' + inputValue;\r\n            }\r\n            try {\r\n                var scriptOutput = this.getIframe().contentWindow.eval(`(function() {${ inputValue }})()`);\r\n                this.log(scriptOutput);\r\n            } catch (err) {\r\n                this.log(err, 'error');\r\n            }\r\n            this.$input.value = '';\r\n            this.$container.scrollTop = this.$container.scrollHeight;\r\n            e.preventDefault();\r\n        }\r\n        clear() {\r\n            this.$output.innerHTML = '';\r\n        }\r\n        history(e) {\r\n            var UP = 38;\r\n            var DOWN = 40;\r\n            var gotHistory = false;\r\n            var selectionStart = this.$input.selectionStart;\r\n            if (e.keyCode === UP && this.historyIndex !== 0 && selectionStart === 0) {\r\n                this.historyIndex--;\r\n                gotHistory = true;\r\n            }\r\n            if (e.keyCode === DOWN && this.historyIndex !== this.history.length - 1 && selectionStart === this.$input.value.length) {\r\n                this.historyIndex++;\r\n                gotHistory = true;\r\n            }\r\n            if (gotHistory) {\r\n                this.$input.value = this.history[this.historyIndex];\r\n            }\r\n        }\r\n\r\n        static get categoryName() {\r\n            return \"general\";\r\n        }\r\n\r\n        static get addonName(){\r\n            return \"console\";\r\n        }\r\n        \r\n    };\r\n\r\n    AddonConsole.register(CodeGround);\r\n\r\n    return AddonConsole;\r\n});"]}