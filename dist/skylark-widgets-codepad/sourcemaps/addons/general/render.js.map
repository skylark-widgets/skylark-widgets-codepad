{"version":3,"sources":["addons/general/render.js"],"names":["define","langx","$","Addon","util","CodeGround","AddonRender","options","html","template","codes","css","js","_init","super","coder","this","supportSrcdoc","document","createElement","$resultFrame","window","addEventListener","domready","bind","listenTo","update","content","frameContent","callbacks","index","lastCallback","_render","htmlTpl","_renderHtml","isString","isFunction","e","oldFrameContent","getCodes","$newResultFrame","replaceWith","contentWindow","open","write","close","attr","jsUrl","location","source","data","JSON","parse","type","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,OAAO,CACH,sBACA,qBACA,cACA,aACA,iBACD,SAAUC,EAAMC,EAAEC,EAAMC,EAAKC,GAC5B,mBACMC,UAAqBH,EAIvBI,cACI,MAAQ,CACJC,KAAO,CACHC,SAAW,SAAUC,GAIjB;;;;;;;;;;;;;;uCAHYA,EAAMC,KAAO;;;gCACdD,EAAMF,MAAQ;;;;;;;wCACZE,EAAME,IAAM;;;yBA6B7B,CACJ,CAGJ,CAEJ,CAEAC,QACIC,MAAMD,MAAM,EAEZ,IAAIE,EAAQC,KAAKD,MAIbE,GAHUD,KAAKT,QAGC,CAAC,EAAE,WAAYW,SAASC,cAAc,QAAQ,IAC9DC,EAAeL,EAAMb,EAAE,6BAA6B,EAOxDmB,OAAOC,iBAAiB,UAAWN,KAAKO,SAASC,KAAKR,IAAI,CAAC,EAE3DA,KAAKS,SAASV,EAAM,UAAUC,KAAKU,MAAM,EAEzCV,KAAKC,cAAgBA,EACrBD,KAAKW,QAVS,CACVnB,KAAM,GACNG,IAAK,GACLC,GAAI,EACR,EAOAI,KAAKY,aAZc,GAanBZ,KAAKI,aAAeA,EACpBJ,KAAKa,UAAY,GACjBb,KAAKc,MAAQ,EACbd,KAAKe,aAAe,OAEpBf,KAAKU,OAAO,CAChB,CAEAM,QAAQtB,GACN,IACMuB,EAQN,OATKjB,KAAKkB,cACJD,EAAUjB,KAAKT,QAAQC,KAAKC,SAC5BR,EAAMkC,SAASF,CAAO,EACxBjB,KAAKkB,YAAcjC,EAAMQ,SAASwB,CAAO,EAChChC,EAAMmC,WAAWH,CAAO,IACjCjB,KAAKkB,YAAcD,IAIhBjB,KAAKkB,YAAYxB,CAAK,CAC/B,CAEAgB,OAAOW,GAGH,IAAIC,EAAkBtB,KAAKY,aACvBlB,EAAQM,KAAKD,MAAMwB,SAAS,EAEhCvB,KAAKY,aAAeZ,KAAKgB,QAAQtB,CAAK,EACtCM,KAAKe,aAAe,KAChBf,KAAKe,aAAe,MAGxB,EACIf,KAAKY,eAAiBU,IAItBtB,KAAKC,eACDuB,EAAkBtB,SAASC,cAAc,QAAQ,EACrDH,KAAKI,aAAaqB,YAAYD,CAAe,EAC7CxB,KAAKI,aAAelB,EAAEsC,CAAe,EACrCA,EAAgBE,cAAcxB,SAASyB,KAAK,EAC5CH,EAAgBE,cAAcxB,SAAS0B,MAAM5B,KAAKY,YAAY,EAC9DY,EAAgBE,cAAcxB,SAAS2B,MAAM,IAE7C7B,KAAKI,aAAa0B,KAAK,cAAe9B,KAAKY,YAAY,EAEvDZ,KAAKI,aAAa0B,KAAK,MADnBC,EAAQ,6DACuB,EAC/B/B,KAAKI,aAAa,GAAGsB,gBACrB1B,KAAKI,aAAa,GAAGsB,cAAcM,SAAWD,IAG1D,CACAxB,SAASc,GACL,GAAIA,EAAEY,SAAWjC,KAAKI,aAAa,GAAGsB,cAAtC,CAGA,IAAIQ,EAAO,GACX,IACIA,EAAOC,KAAKC,MAAMf,EAAEa,IAAI,CAE5B,CADE,MAAOb,IAES,sBAAda,EAAKG,MACLrC,KAAKe,aAAa,CAPtB,CASJ,CAEAuB,0BACI,MAAO,SACX,CAEAC,uBACI,MAAO,QACX,CAEJ,CAIA,OAFAjD,EAAYkD,SAASnD,CAAU,EAExBC,CACX,CAAC","file":"../../../addons/general/render.js","sourcesContent":["define([\r\n    'skylark-langx/langx',\r\n    \"skylark-domx-query\",\r\n    \"../../addon\",\r\n    '../../util',\r\n    \"../../codepad\"\r\n], function (langx,$,Addon,util,CodeGround) {\r\n    'use strict';\r\n    class AddonRender  extends Addon{\r\n        //constructor(coder, options) \r\n\r\n        //default options\r\n        get options () {\r\n            return  {\r\n                html : {\r\n                    template : function (codes) {\r\n                        let style = codes.css || \"\",\r\n                            body = codes.html || \"\", \r\n                            script = codes.js || \"\";\r\n                        return   `\r\n                          <!doctype html>\r\n                          <html>\r\n                            <head>\r\n                              <script>\r\n                                (function () {\r\n                                  window.addEventListener('DOMContentLoaded', function () {\r\n                                    window.parent.postMessage(JSON.stringify({\r\n                                      type: 'codepad-dom-ready'\r\n                                    }), '*')\r\n                                  })\r\n                                }())\r\n                              </script>\r\n\r\n                              <style>${ style }</style>\r\n                            </head>\r\n                            <body>\r\n                              ${ body }\r\n\r\n                              <!--\r\n                                CodeGround:\r\n                                Empty script tag prevents malformed HTML from breaking the next script.\r\n                              -->\r\n                              <script></script>\r\n                              <script>${ script }</script>\r\n                            </body>\r\n                          </html>\r\n                        `;\r\n                    }                    \r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n        _init() {\r\n            super._init();\r\n\r\n            var coder = this.coder,\r\n                options = this.options;\r\n\r\n\r\n            var supportSrcdoc = !!('srcdoc' in document.createElement('iframe'));\r\n            var $resultFrame = coder.$('.codepad-pane-result iframe');\r\n            var frameContent = '';\r\n            var content = {\r\n                html: '',\r\n                css: '',\r\n                js: ''\r\n            };\r\n            window.addEventListener('message', this.domready.bind(this));\r\n\r\n            this.listenTo(coder,\"changed\",this.update);\r\n\r\n            this.supportSrcdoc = supportSrcdoc;\r\n            this.content = content;\r\n            this.frameContent = frameContent;\r\n            this.$resultFrame = $resultFrame;\r\n            this.callbacks = [];\r\n            this.index = 0;\r\n            this.lastCallback = () => {\r\n            };\r\n            this.update();\r\n        }\r\n\r\n        _render(codes){\r\n          if (!this._renderHtml) {\r\n            let htmlTpl = this.options.html.template;\r\n            if (langx.isString(htmlTpl)) {\r\n              this._renderHtml = langx.template(htmlTpl);\r\n            } else if (langx.isFunction(htmlTpl)) {\r\n              this._renderHtml = htmlTpl;\r\n            }\r\n          }\r\n\r\n          return this._renderHtml(codes);\r\n        }\r\n\r\n        update(e) {\r\n            //var params = e.data;\r\n            //this.content[params.type] = params.content;\r\n            var oldFrameContent = this.frameContent;\r\n            let codes = this.coder.getCodes();\r\n\r\n            this.frameContent = this._render(codes);\r\n            this.lastCallback = () => {\r\n                this.lastCallback = () => {\r\n                };\r\n                //callback(null, params);\r\n            };\r\n            if (this.frameContent === oldFrameContent) {\r\n                //callback(null, params);\r\n                return;\r\n            }\r\n            if (this.supportSrcdoc) {\r\n                var $newResultFrame = document.createElement('iframe');\r\n                this.$resultFrame.replaceWith($newResultFrame);\r\n                this.$resultFrame = $($newResultFrame);\r\n                $newResultFrame.contentWindow.document.open();\r\n                $newResultFrame.contentWindow.document.write(this.frameContent);\r\n                $newResultFrame.contentWindow.document.close();\r\n            } else {\r\n                this.$resultFrame.attr('data-srcdoc', this.frameContent);\r\n                var jsUrl = 'javascript:window.frameElement.getAttribute(\"data-srcdoc\");';\r\n                this.$resultFrame.attr('src', jsUrl);\r\n                if (this.$resultFrame[0].contentWindow) {\r\n                    this.$resultFrame[0].contentWindow.location = jsUrl;\r\n                }\r\n            }\r\n        }\r\n        domready(e) {\r\n            if (e.source !== this.$resultFrame[0].contentWindow) {\r\n                return;\r\n            }\r\n            var data = {};\r\n            try {\r\n                data = JSON.parse(e.data);\r\n            } catch (e) {\r\n            }\r\n            if (data.type === 'codepad-dom-ready') {\r\n                this.lastCallback();\r\n            }\r\n        }\r\n\r\n        static get categoryName() {\r\n            return \"general\";\r\n        }\r\n\r\n        static get addonName(){\r\n            return \"render\";\r\n        }\r\n\r\n    };\r\n\r\n    AddonRender.register(CodeGround);\r\n\r\n    return AddonRender;\r\n});"]}