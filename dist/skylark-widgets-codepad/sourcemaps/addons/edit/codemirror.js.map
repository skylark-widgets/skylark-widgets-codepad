{"version":3,"sources":["addons/edit/codemirror.js"],"names":["define","langx","$","CodeMirror","Addon","util","CodeGround","AddonCodeMirror","options","highlightLine","lineNumbers","lineWrapping","foldGutter","gutters","pluginCssClass","_init","super","coder","this","modemap","editors","html","$editors","i","length","let","$textarea","find","type","data","editor","fromTextArea","setOption","getMode","on","editorChange","listenTo","update","params","val","getValue","trigger","e","codes","getCodes","code","content","isString","setValue","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,OAAO,CACH,sBACA,qBAEA,gCACA,cACA,aACA,gBACA,kCACA,kCACA,gDACA,8CACA,4CAEA,2CAEA,iDAEA,yCACA,2CACA,2CACA,yCACA,4CACA,8CACA,6CAEA,8CACA,8CACA,8CAEA,+CACA,yCACA,oDAMA,yCAEA,6CACA,gDAEA,gDACA,qCAEA,sCACD,SAAUC,EAAMC,EAAEC,EAAWC,EAAMC,EAAKC,GACvC,mBACMC,UAAyBH,EAG3BI,cACI,MAAO,CACHC,cAAe,CAAA,EAEfC,YAAa,CAAA,EACbC,aAAc,CAAA,EACdC,WAAY,CAAA,EACZC,QAAS,CAAC,yBAA0B,yBAEpCC,eAAiB,2BACrB,CACJ,CAEAC,QACIC,MAAMD,MAAM,EAcZ,IAbA,IAAIE,EAAQC,KAAKD,MAObE,GANUD,KAAKV,QAInBU,KAAKE,QAAU,GAED,CAAEC,KAAQ,WAAY,GAChCb,EAAUU,KAAKV,QAIfc,EAAWL,EAAMf,EAAE,iBAAiB,EACnCqB,EAAI,EAAGA,EAAID,EAASE,OAAQD,CAAC,GAAI,CAClCE,IAAIC,EAAYxB,EAAEoB,EAASC,EAAE,EAAEI,KAAK,UAAU,EAC1CC,EAAOF,EAAUG,KAAK,cAAc,EACpCC,EAASZ,KAAKE,QAAQQ,GAAQzB,EAAW4B,aAAaL,EAAU,GAAIlB,CAAO,EAC/EsB,EAAOE,UAAU,OAAQ3B,EAAK4B,QAAQL,EAAM,GAAIT,CAAO,CAAC,EACxDW,EAAOJ,UAAYA,EACnBI,EAAOI,GAAG,SAAUhB,KAAKiB,aAAa,CAClCP,KAAAA,CACJ,CAAC,CAAC,CAEN,CACAV,KAAKkB,SAASnB,EAAM,UAAUC,KAAKmB,MAAM,CAC7C,CAEAF,aAAaG,GACT,MAAO,KACH,IAAIR,EAASZ,KAAKE,QAAQkB,EAAOV,MACjCE,EAAOJ,UAAUa,IAAIT,EAAOU,SAAS,CAAC,EACtCV,EAAOJ,UAAUe,QAAQ,QAAQ,CACrC,CACJ,CAEAJ,OAAOK,GACH,IACSd,EADLe,EAAQzB,KAAKD,MAAM2B,SAAS,EAChC,IAAShB,KAAQV,KAAKE,QAAS,CAC3BK,IAAIK,EAASZ,KAAKE,QAAQQ,GACtBiB,EAAOF,EAAMf,GACbkB,EAEAA,EADA7C,EAAM8C,SAASF,CAAI,EACTA,EAEAA,EAAKC,SAAW,GAE9BhB,EAAOkB,SAASF,CAAO,CAC3B,CAEJ,CAGAG,0BACI,MAAO,MACX,CAEAC,uBACI,MAAO,YACX,CACJ,CAIA,OAFA3C,EAAgB4C,SAAS7C,CAAU,EAE5BC,CACX,CAAC","file":"../../../addons/edit/codemirror.js","sourcesContent":["define([\r\n    'skylark-langx/langx',\r\n    'skylark-domx-query',\r\n\r\n    'skylark-codemirror/CodeMirror',\r\n    \"../../addon\",\r\n    '../../util',\r\n    \"../../codepad\",\r\n    \"skylark-codemirror/mode/xml/xml\",\r\n    \"skylark-codemirror/mode/css/css\",\r\n    \"skylark-codemirror/mode/javascript/javascript\",\r\n    \"skylark-codemirror/mode/htmlmixed/htmlmixed\",\r\n    \"skylark-codemirror/mode/markdown/markdown\",\r\n\r\n    \"skylark-codemirror/addon/comment/comment\",\r\n\r\n    \"skylark-codemirror/addon/selection/active-line\",\r\n\r\n    \"skylark-codemirror/addon/fold/foldcode\",\r\n    \"skylark-codemirror/addon/fold/foldgutter\",\r\n    \"skylark-codemirror/addon/fold/brace-fold\",\r\n    \"skylark-codemirror/addon/fold/xml-fold\",\r\n    \"skylark-codemirror/addon/fold/indent-fold\",\r\n    \"skylark-codemirror/addon/fold/markdown-fold\",\r\n    \"skylark-codemirror/addon/fold/comment-fold\",\r\n\r\n    \"skylark-codemirror/addon/edit/matchbrackets\",\r\n    \"skylark-codemirror/addon/edit/closebrackets\",\r\n    \"skylark-codemirror/addon/edit/trailingspace\",\r\n\r\n    \"skylark-codemirror/addon/search/searchcursor\",\r\n    \"skylark-codemirror/addon/search/search\",\r\n    \"skylark-codemirror/addon/search/match-highlighter\",\r\n\r\n\r\n    ///\"skylark-codemirror/addon/keymap/emacs\",\r\n    ///\"skylark-codemirror/addon/keymap/sublime\",\r\n\r\n    \"skylark-codemirror/addon/dialog/dialog\",\r\n\r\n    \"skylark-codemirror/addon/hint/anyword-hint\",\r\n    \"skylark-codemirror/addon/hint/javascript-hint\",\r\n\r\n    \"skylark-codemirror/addon/lint/javascript-lint\",\r\n    \"skylark-codemirror/addon/lint/lint\",\r\n\r\n    \"skylark-codemirror/addon/tern/tern\"\r\n], function (langx,$,CodeMirror,Addon,util,CodeGround) {\r\n    'use strict';\r\n    class AddonCodeMirror  extends Addon{\r\n        //constructor(coder, options) \r\n\r\n        get options() {\r\n            return {\r\n                highlightLine: true,\r\n\r\n                lineNumbers: true,\r\n                lineWrapping: true,\r\n                foldGutter: true,\r\n                gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\r\n\r\n                pluginCssClass : \"codepad-plugin-codemirror\"\r\n            }\r\n        }\r\n\r\n        _init() {\r\n            super._init();\r\n            var coder = this.coder,\r\n                options = this.options;\r\n\r\n            var priority = 1;\r\n            var i;\r\n            this.editors = {};\r\n            //this.coder = coder;\r\n            var modemap = { 'html': 'htmlmixed' };\r\n            var options = this.options;\r\n            //if (typeof window.CodeMirror === 'undefined') {\r\n            //    return;\r\n            //}\r\n            var $editors = coder.$('.codepad-editor');\r\n            for (i = 0; i < $editors.length; i++) {\r\n                let $textarea = $($editors[i]).find('textarea');\r\n                let type = $textarea.data('codepad-type');\r\n                let editor = this.editors[type] = CodeMirror.fromTextArea($textarea[0], options);\r\n                editor.setOption('mode', util.getMode(type, '', modemap));\r\n                editor.$textarea = $textarea;\r\n                editor.on('change', this.editorChange({\r\n                    type\r\n                }));\r\n\r\n            }\r\n            this.listenTo(coder,\"reseted\",this.update);\r\n        }\r\n\r\n        editorChange(params) {\r\n            return () => {\r\n                var editor = this.editors[params.type];\r\n                editor.$textarea.val(editor.getValue());\r\n                editor.$textarea.trigger(\"change\");\r\n            };\r\n        }\r\n\r\n        update(e) {\r\n            var codes = this.coder.getCodes();\r\n            for (let type in this.editors) {\r\n                let editor = this.editors[type],\r\n                    code = codes[type],\r\n                    content;\r\n                if (langx.isString(code)) {\r\n                    content = code;\r\n                } else {\r\n                    content = code.content || \"\";\r\n                }\r\n                editor.setValue(content);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        static get categoryName() {\r\n            return \"edit\";\r\n        }\r\n\r\n        static get addonName(){\r\n            return \"codemirror\";\r\n        }        \r\n    };\r\n\r\n    AddonCodeMirror.register(CodeGround);\r\n\r\n    return AddonCodeMirror;\r\n});"]}