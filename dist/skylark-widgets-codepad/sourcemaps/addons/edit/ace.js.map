{"version":3,"sources":["addons/edit/ace.js"],"names":["define","langx","datax","ace","Addon","util","CodeGround","AddonAce","_init","super","coder","this","options","editors","$editors","$","i","length","let","$textarea","querySelector","type","data","file","$aceContainer","document","createElement","editor","appendChild","edit","editorOptions","clone","getSession","setMode","getMode","setOptions","$blockScrolling","Infinity","on","editorChange","listenTo","update","params","val","getValue","trigger","e","codes","getCodes","code","content","isString","setValue","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,OAAO,CACH,sBACA,oBACA,cACA,cACA,aACA,iBACD,SAAUC,EAAMC,EAAMC,EAAIC,EAAMC,EAAKC,GACpC,mBACMC,UAAiBH,EAGnBI,QACIC,MAAMD,MAAM,EAeZ,IAdA,IAAIE,EAAQC,KAAKD,MAWbE,GAVUD,KAAKC,QAInBD,KAAKE,QAAU,GAMDF,KAAKC,SAEfE,EAAWJ,EAAMK,EAAE,iBAAiB,EACnCC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,CAAC,GAAI,CAClCE,IAAIC,EAAYL,EAASE,GAAGI,cAAc,UAAU,EAChDC,EAAOnB,EAAMoB,KAAKH,EAAW,cAAc,EAC3CI,EAAOrB,EAAMoB,KAAKH,EAAW,cAAc,EAC3CK,EAAgBC,SAASC,cAAc,KAAK,EAE5CC,GADJb,EAASE,GAAGY,YAAYJ,CAAa,EACxBb,KAAKE,QAAQQ,GAAQlB,EAAI0B,KAAKL,CAAa,GACpDM,EAAgB7B,EAAM8B,MAAMnB,CAAO,EACvCe,EAAOK,WAAW,EAAEC,QAAQ,YAAc5B,EAAK6B,QAAQb,EAAME,CAAI,CAAC,EAClEI,EAAOK,WAAW,EAAEG,WAAWL,CAAa,EAC5CH,EAAOS,gBAAkBC,EAAAA,EAEzBV,EAAOR,UAAYA,EACnBQ,EAAOW,GAAG,SAAU3B,KAAK4B,aAAa,CAClClB,KAAAA,CACJ,CAAC,CAAC,CACN,CACAV,KAAK6B,SAAS9B,EAAM,UAAUC,KAAK8B,MAAM,EACzC9B,KAAK8B,OAAO,CAChB,CAEAF,aAAaG,GACT,MAAO,KACH,IAAIf,EAAShB,KAAKE,QAAQ6B,EAAOrB,MACjCM,EAAOR,UAAUwB,IAAIhB,EAAOiB,SAAS,CAAC,EACtCjB,EAAOR,UAAU0B,QAAQ,QAAQ,CACrC,CAOJ,CACAJ,OAAOK,GACH,IACSzB,EADL0B,EAAQpC,KAAKD,MAAMsC,SAAS,EAChC,IAAS3B,KAAQV,KAAKE,QAAS,CAC3BK,IAAIS,EAAShB,KAAKE,QAAQQ,GACtB4B,EAAOF,EAAM1B,GACb6B,EAEAA,EADAjD,EAAMkD,SAASF,CAAI,EACTA,EAEAA,EAAKC,SAAW,GAE9BvB,EAAOK,WAAW,EAAEoB,SAASF,CAAO,CACxC,CAKJ,CAGAG,0BACI,MAAO,MACX,CAEAC,uBACI,MAAO,KACX,CACJ,CAIA,OAFA/C,EAASgD,SAASjD,CAAU,EAErBC,CACX,CAAC","file":"../../../addons/edit/ace.js","sourcesContent":["define([\r\n    'skylark-langx/langx',\r\n    'skylark-domx-data',\r\n    'skylark-ace',\r\n    \"../../addon\",\r\n    '../../util',\r\n    \"../../codepad\"\r\n], function (langx,datax,ace,Addon,util,CodeGround) {\r\n    'use strict';\r\n    class AddonAce extends Addon {\r\n        //constructor(coder, options) \r\n\r\n        _init() {\r\n            super._init();\r\n            var coder = this.coder,\r\n                options = this.options;\r\n\r\n            var priority = 1;\r\n            var i;\r\n            this.editors = {};\r\n            //this.coder = coder;\r\n            //options = langx.clone(options);\r\n            //if (typeof //window.ace === 'undefined') {\r\n            //    retur//n;\r\n            // }\r\n            var options = this.options;\r\n\r\n            var $editors = coder.$('.codepad-editor');\r\n            for (i = 0; i < $editors.length; i++) {\r\n                let $textarea = $editors[i].querySelector('textarea');\r\n                let type = datax.data($textarea, 'codepad-type');\r\n                let file = datax.data($textarea, 'codepad-file');\r\n                let $aceContainer = document.createElement('div');\r\n                $editors[i].appendChild($aceContainer);\r\n                let editor = this.editors[type] = ace.edit($aceContainer);\r\n                let editorOptions = langx.clone(options);\r\n                editor.getSession().setMode('ace/mode/' + util.getMode(type, file));\r\n                editor.getSession().setOptions(editorOptions);\r\n                editor.$blockScrolling = Infinity;\r\n\r\n                editor.$textarea = $textarea;\r\n                editor.on('change', this.editorChange({\r\n                    type\r\n                }));\r\n            }\r\n            this.listenTo(coder,\"reseted\",this.update);\r\n            this.update();\r\n        }\r\n        \r\n        editorChange(params) {\r\n            return () => {\r\n                var editor = this.editors[params.type];\r\n                editor.$textarea.val(editor.getValue());\r\n                editor.$textarea.trigger(\"change\");\r\n            };\r\n\r\n            ///return () => {\r\n            ///    var editor = this.editor[params.type];\r\n            ///    params.content = editor.getValue();\r\n            ///    this.coder.emit('change', params);\r\n            ///};\r\n        }\r\n        update(e) {\r\n            var codes = this.coder.getCodes();\r\n            for (let type in this.editors) {\r\n                let editor = this.editors[type],\r\n                    code = codes[type],\r\n                    content;\r\n                if (langx.isString(code)) {\r\n                    content = code;\r\n                } else {\r\n                    content = code.content || \"\";\r\n                }\r\n                editor.getSession().setValue(content);\r\n            }\r\n\r\n            ///var params = e.data,\r\n            ///    editor = this.editor[params.type];\r\n            ///editor.getSession().setValue(params.content);\r\n        }\r\n\r\n\r\n        static get categoryName() {\r\n            return \"edit\";\r\n        }\r\n\r\n        static get addonName(){\r\n            return \"ace\";\r\n        }        \r\n    };\r\n\r\n    AddonAce.register(CodeGround);\r\n    \r\n    return AddonAce;\r\n});"]}