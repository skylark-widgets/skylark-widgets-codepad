{"version":3,"sources":["codepad.js"],"names":["define","skylark","langx","Widget","styler","datax","noder","util","template","addons","Codepad","klassName","pluginName","options","files","showBlank","runScripts","pane","debounce","general","_init","type","this","paneActive","gerneral","push","super","_cached","html","css","js","$container","_elm","_paneActive","_velm","container","addClass","containerClass","paneActiveClass","on","change","bind","_$status","codes","_markup","_setCodes","_startup","let","hasFileClass","$parent","$","find","append","createElement","innerHTML","editorContent","className","editorClass","_load","code","content","isString","val","e","cached","data","target","value","emit","file","getCodes","clone","resetCodes","errors","errs","params","status","oldPaneActive","elmx","removeClass","preventDefault","statusType","messages","length","clearStatus","$status","_get","markup","statusClass","statusActiveClass","forEach","err","statusMessage","attach"],"mappings":"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","file":"../codepad.js","sourcesContent":["define([\r\n    'skylark-langx/skylark',\r\n    'skylark-langx/langx',\r\n    'skylark-widgets-base/widget',\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-noder\",\r\n    './util',\r\n    './template',\r\n    \"./addons\"\r\n], function (skylark,langx,Widget, styler,datax,noder,util, template,addons) {\r\n    'use strict';\r\n\r\n    class Codepad extends Widget{\r\n        get klassName() {\r\n          return \"Codepad\";\r\n        } \r\n\r\n        get pluginName(){\r\n          return \"lark.Codepad\";\r\n        } \r\n\r\n        //default options\r\n        get options () {\r\n            return {\r\n                files: [],\r\n                showBlank: false,\r\n                runScripts: true,\r\n                pane: 'result',\r\n                debounce: 250,\r\n                addons: {\r\n                    \"general\" : [\"render\"]\r\n                }\r\n            }\r\n        }\r\n\r\n        _init () {\r\n  \r\n            var options = this.options;\r\n            if (options.runScripts === false) {\r\n                options.addons.gerneral.push('scriptless');\r\n            }\r\n\r\n            super._init();\r\n\r\n            this._cached =  {\r\n                html: null,\r\n                css: null,\r\n                js: null\r\n            };\r\n\r\n            var $container = this.$container = this._elm;\r\n\r\n            var paneActive = this._paneActive = options.pane;\r\n\r\n            var velm = this._velm;\r\n            velm.html(template.container())\r\n                .addClass(template.containerClass())\r\n                .addClass(template.paneActiveClass(paneActive))\r\n                ///.on('keyup', langx.debounce(this.change.bind(this), options.debounce))\r\n                .on('change', langx.debounce(this.change.bind(this), options.debounce))\r\n                .on('click', this.pane.bind(this));\r\n\r\n            this._$status =  {};\r\n\r\n            for (let type of [\r\n                    'html',\r\n                    'css',\r\n                    'js'\r\n                ]) {\r\n                if (this.options.codes[type] !== false) {\r\n                    this._markup(type);\r\n                }\r\n            }\r\n            this._setCodes(this.options.codes);\r\n        }\r\n\r\n        _startup() {\r\n            var options = this.options;\r\n            this.paneActive = this._paneActive;\r\n\r\n            if (options.showBlank) {\r\n                for (let type of [\r\n                        'html',\r\n                        'css',\r\n                        'js'\r\n                    ]) {\r\n                    this._velm.addClass(template.hasFileClass(type));\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        _markup(type) {\r\n            var $container = this._elm;\r\n            var $parent = this.$().find(`.codepad-pane-${ type }`);\r\n\r\n            $parent.append(noder.createElement(\"div\",{\r\n                innerHTML : template.editorContent(type),\r\n                className : template.editorClass(type)\r\n            }));\r\n            this._$status[type] = $parent.find('.codepad-status');\r\n             styler.addClass($container, template.hasFileClass(type));\r\n        }\r\n\r\n        _load(type) {\r\n            var cached = this._cached,\r\n                code = cached[type] || {},\r\n                content;\r\n\r\n            if (langx.isString(code)) {\r\n                content = code;\r\n            } else {\r\n                content = code.content || \"\";\r\n            }\r\n            var $textarea = this.$(`.codepad-pane-${ type } textarea`);\r\n            $textarea.val(content);\r\n        }\r\n\r\n\r\n        change(e) {\r\n            var type = datax.data(e.target, 'codepad-type');\r\n            if (!type) {\r\n                return;\r\n            }\r\n            var cached = this._cached;\r\n            if (cached[type] === e.target.value) {\r\n                return;\r\n            }\r\n            cached[type] = e.target.value;\r\n            this.emit('changed', {\r\n                type: type,\r\n                file: datax.data(e.target, 'codepad-file'),\r\n                content: cached[type]\r\n            });\r\n        }\r\n\r\n        getCodes() {\r\n            return langx.clone(this._cached);\r\n        }\r\n\r\n        _setCodes(codes) {\r\n            var cached = this._cached;\r\n            cached.html = codes.html || null;\r\n            cached.css = codes.css || null;\r\n            cached.js = codes.js || null;\r\n\r\n            for (let type of [\r\n                    'html',\r\n                    'css',\r\n                    'js'\r\n                ]) {\r\n                this._load(type);\r\n            }\r\n        }\r\n\r\n        resetCodes(codes) {\r\n            this._setCodes(codes);\r\n            this.emit(\"reseted\");\r\n            return this;\r\n        }\r\n\r\n        errors(errs, params) {\r\n            this.status('error', errs, params);\r\n        }\r\n\r\n        pane(e) {\r\n            if (!datax.data(e.target, 'codepad-type')) {\r\n                return;\r\n            }\r\n           let oldPaneActive = this._paneActive,\r\n                paneActive = this._paneActive = datax.data(e.target, 'codepad-type');\r\n            this.elmx().removeClass(template.paneActiveClass(oldPaneActive))\r\n                       .addClass(template.paneActiveClass(paneActive));\r\n            e.preventDefault();\r\n        }\r\n\r\n        status(statusType = 'error', messages = [], params = {}) {\r\n            if (!messages.length) {\r\n                return this.clearStatus(statusType, params);\r\n            }\r\n            var $status = this._get('$status');\r\n            styler.addClass($status[params.type], template.statusClass(statusType));\r\n            //styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\r\n            styler.addClass(this._elm, template.statusActiveClass(params.type));\r\n            var markup = '';\r\n            messages.forEach(function (err) {\r\n                markup += template.statusMessage(err);\r\n            });\r\n            $status[params.type].innerHTML = markup;\r\n        }\r\n        clearStatus(statusType, params) {\r\n            var $status = this._get('$status');\r\n            styler.removeClass($status[params.type], template.statusClass(statusType));\r\n            //styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\r\n            styler.removeClass(this._elm, template.statusActiveClass(params.type));\r\n            $status[params.type].innerHTML = '';\r\n        }\r\n    }\r\n    Codepad.addons = addons;\r\n\r\n    return skylark.attach(\"widgets.Codepad\",Codepad);\r\n});"]}